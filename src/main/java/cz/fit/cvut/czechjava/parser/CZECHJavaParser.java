/* CZECHJavaParser.java */
 /* Generated By:JJTree&JavaCC: Do not edit this line. CZECHJavaParser.java */
package cz.fit.cvut.czechjava.parser;

public class CZECHJavaParser/*@bgen(jjtree)*/ implements CZECHJavaParserTreeConstants, CZECHJavaParserConstants {/*@bgen(jjtree)*/
    protected JJTCZECHJavaParserState jjtree = new JJTCZECHJavaParserState();

    public Node rootNode() {
        return jjtree.rootNode();
    }

    /**
     * ***************************************
     * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
     * ***************************************
     * @throws cz.fit.cvut.czechjava.parser.ParseException
     */

    /*
 * Program structuring syntax follows.
     */
    final public void CompilationUnit() throws ParseException {/*@bgen(jjtree) CompilationUnit */
        ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Begin();
            label_1:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case CLASS: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                ClassDeclaration();
            }
            End();
            jj_consume_token(0);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Begin() throws ParseException {
        jj_consume_token(BEGIN);
        jj_consume_token(ENDLINE);
    }

    final public void End() throws ParseException {
        jj_consume_token(END);
        jj_consume_token(ENDLINE);
    }

    /*
 * Declaration syntax follows.
     */
    final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) Class */
        ASTClass jjtn000 = new ASTClass(JJTCLASS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            jj_consume_token(CLASS);
            t = jj_consume_token(IDENTIFIER);
            jjtn000.name = t.image;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case EXTENDS: {
                    jj_consume_token(EXTENDS);
                    t = jj_consume_token(IDENTIFIER);
                    jjtn000.extending = t.image;
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    ;
            }
            jj_consume_token(LBRACE);
            label_2:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case DECLARATION:
                    case VOID:
                    case STATIC:
                    case NATIVE:
                    case INT:
                    case BOOLEAN:
                    case FLOAT:
                    case CHAR:
                    case IDENTIFIER: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[2] = jj_gen;
                        break label_2;
                }
                ClassBodyDeclaration();
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ClassBodyDeclaration() throws ParseException {
        if (jj_2_1(2147483647)) {
            FieldDeclaration();
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case VOID:
                case STATIC:
                case NATIVE:
                case INT:
                case BOOLEAN:
                case FLOAT:
                case CHAR:
                case IDENTIFIER: {
                    MethodDeclaration();
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

// This production is to determine lookahead only.
    final public void MethodDeclarationLookahead() throws ParseException {/*@bgen(jjtree) MethodDeclarationLookahead */
        ASTMethodDeclarationLookahead jjtn000 = new ASTMethodDeclarationLookahead(JJTMETHODDECLARATIONLOOKAHEAD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ResultType();
            jj_consume_token(IDENTIFIER);
            jj_consume_token(LPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*void InterfaceDeclaration() :
{}
{
  ( "abstract" | "public" )*
  "interface" <IDENTIFIER> [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}*/
    final public void FieldDeclaration() throws ParseException {/*@bgen(jjtree) FieldDeclaration */
        ASTFieldDeclaration jjtn000 = new ASTFieldDeclaration(JJTFIELDDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(DECLARATION);
            Type();
            VariableDeclaratorId();
            label_3:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[4] = jj_gen;
                        break label_3;
                }
                jj_consume_token(COMMA);
                VariableDeclaratorId();
            }
            jj_consume_token(ENDLINE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void VariableDeclarator() throws ParseException {/*@bgen(jjtree) VariableDeclarator */
        ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Name();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case ASSIGN: {
                    jj_consume_token(ASSIGN);
                    AdditiveExpression();
                    break;
                }
                default:
                    jj_la1[5] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void VariableDeclaratorId() throws ParseException {/*@bgen(jjtree) Variable */
        ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtn000.value = t.image;
            label_4:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LBRACKET: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[6] = jj_gen;
                        break label_4;
                }
                jj_consume_token(LBRACKET);
                jj_consume_token(RBRACKET);
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void VariableInitializer() throws ParseException {/*@bgen(jjtree) VariableInitializer */
        ASTVariableInitializer jjtn000 = new ASTVariableInitializer(JJTVARIABLEINITIALIZER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACE: {
                    jj_consume_token(LBRACE);
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case SUPER:
                        case THIS:
                        case NULL:
                        case TRUE:
                        case FALSE:
                        case NEW:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case LBRACE:
                        case BANG:
                        case PLUS:
                        case MINUS:
                        case IDENTIFIER: {
                            VariableInitializer();
                            label_5:
                            while (true) {
                                if (jj_2_2(2)) {
                                    ;
                                } else {
                                    break label_5;
                                }
                                jj_consume_token(COMMA);
                                VariableInitializer();
                            }
                            break;
                        }
                        default:
                            jj_la1[7] = jj_gen;
                            ;
                    }
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case COMMA: {
                            jj_consume_token(COMMA);
                            break;
                        }
                        default:
                            jj_la1[8] = jj_gen;
                            ;
                    }
                    jj_consume_token(RBRACE);
                    break;
                }
                case SUPER:
                case THIS:
                case NULL:
                case TRUE:
                case FALSE:
                case NEW:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case BANG:
                case PLUS:
                case MINUS:
                case IDENTIFIER: {
                    Expression();
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) MethodDeclaration */
        ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case STATIC: {
                    ASTStatic jjtn001 = new ASTStatic(JJTSTATIC);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                    try {
                        jj_consume_token(STATIC);
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtn001.jjtSetLastToken(getToken(0));
                        }
                    }
                    break;
                }
                default:
                    jj_la1[10] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case NATIVE: {
                    ASTNative jjtn002 = new ASTNative(JJTNATIVE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                    try {
                        jj_consume_token(NATIVE);
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtn002.jjtSetLastToken(getToken(0));
                        }
                    }
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    ;
            }
            MethodHeader();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACE: {
                    Block();
                    break;
                }
                case ENDLINE: {
                    jj_consume_token(ENDLINE);
                    break;
                }
                default:
                    jj_la1[12] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MethodHeader() throws ParseException {
        if (jj_2_3(2147483647)) {
            ResultType();
            MethodDeclarator();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case THROWS: {
                    jj_consume_token(THROWS);
                    NameList();
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    ;
            }
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case IDENTIFIER: {
                    MethodDeclarator();
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case THROWS: {
                            jj_consume_token(THROWS);
                            NameList();
                            break;
                        }
                        default:
                            jj_la1[14] = jj_gen;
                            ;
                    }
                    break;
                }
                default:
                    jj_la1[15] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void MethodDeclarator() throws ParseException {/*@bgen(jjtree) Method */
        ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtn000.value = t.image;
            FormalParameters();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void FormalParameters() throws ParseException {/*@bgen(jjtree) FormalParameters */
        ASTFormalParameters jjtn000 = new ASTFormalParameters(JJTFORMALPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LPAREN);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INT:
                case BOOLEAN:
                case FLOAT:
                case CHAR:
                case IDENTIFIER: {
                    FormalParameter();
                    label_6:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case COMMA: {
                                ;
                                break;
                            }
                            default:
                                jj_la1[16] = jj_gen;
                                break label_6;
                        }
                        jj_consume_token(COMMA);
                        FormalParameter();
                    }
                    break;
                }
                default:
                    jj_la1[17] = jj_gen;
                    ;
            }
            jj_consume_token(RPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void FormalParameter() throws ParseException {/*@bgen(jjtree) FormalParameter */
        ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Type();
            VariableDeclaratorId();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ConstructorDeclaration() throws ParseException {/*@bgen(jjtree) ConstructorDeclaration */
        ASTConstructorDeclaration jjtn000 = new ASTConstructorDeclaration(JJTCONSTRUCTORDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IDENTIFIER);
            FormalParameters();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case THROWS: {
                    jj_consume_token(THROWS);
                    NameList();
                    break;
                }
                default:
                    jj_la1[18] = jj_gen;
                    ;
            }
            jj_consume_token(LBRACE);
            if (jj_2_4(2)) {
                ExplicitConstructorInvocation();
            } else {
                ;
            }
            label_7:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case DECLARATION:
                    case SUPER:
                    case THIS:
                    case NULL:
                    case TRUE:
                    case FALSE:
                    case NEW:
                    case IF:
                    case WHILE:
                    case BREAK:
                    case CONTINUE:
                    case RETURN:
                    case DEBUG:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case LPAREN:
                    case IDENTIFIER: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[19] = jj_gen;
                        break label_7;
                }
                BlockStatement();
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ExplicitConstructorInvocation() throws ParseException {/*@bgen(jjtree) ExplicitConstructorInvocation */
        ASTExplicitConstructorInvocation jjtn000 = new ASTExplicitConstructorInvocation(JJTEXPLICITCONSTRUCTORINVOCATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case THIS: {
                    jj_consume_token(THIS);
                    Arguments();
                    jj_consume_token(ENDLINE);
                    break;
                }
                case SUPER: {
                    jj_consume_token(SUPER);
                    Arguments();
                    jj_consume_token(ENDLINE);
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
 * Type, name and expression syntax follows.
     */
    final public void Type() throws ParseException {/*@bgen(jjtree) Type */
        ASTType jjtn000 = new ASTType(JJTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INT:
                case BOOLEAN:
                case FLOAT:
                case CHAR: {
                    PrimitiveType();
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case LBRACKET: {
                            ArrayType();
                            break;
                        }
                        default:
                            jj_la1[21] = jj_gen;
                            ;
                    }
                    break;
                }
                case IDENTIFIER: {
                    Name();
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case LBRACKET: {
                            ArrayType();
                            break;
                        }
                        default:
                            jj_la1[22] = jj_gen;
                            ;
                    }
                    break;
                }
                default:
                    jj_la1[23] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ArrayType() throws ParseException {/*@bgen(jjtree) ArrayType */
        ASTArrayType jjtn000 = new ASTArrayType(JJTARRAYTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void PrimitiveType() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case BOOLEAN: {
                ASTBool jjtn001 = new ASTBool(JJTBOOL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(BOOLEAN);
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case CHAR: {
                ASTChar jjtn002 = new ASTChar(JJTCHAR);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtn002.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(CHAR);
                } finally {
                    if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtn002.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case INT: {
                ASTNumber jjtn003 = new ASTNumber(JJTNUMBER);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(INT);
                } finally {
                    if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtn003.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case FLOAT: {
                ASTFloat jjtn004 = new ASTFloat(JJTFLOAT);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtn004.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(FLOAT);
                } finally {
                    if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtn004.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            default:
                jj_la1[24] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void ResultType() throws ParseException {/*@bgen(jjtree) ResultType */
        ASTResultType jjtn000 = new ASTResultType(JJTRESULTTYPE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case VOID: {
                    jj_consume_token(VOID);
                    break;
                }
                case INT:
                case BOOLEAN:
                case FLOAT:
                case CHAR:
                case IDENTIFIER: {
                    Type();
                    break;
                }
                default:
                    jj_la1[25] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Name() throws ParseException {/*@bgen(jjtree) Name */
        ASTName jjtn000 = new ASTName(JJTNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            jjtn000.value = t.image;
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void NameList() throws ParseException {/*@bgen(jjtree) NameList */
        ASTNameList jjtn000 = new ASTNameList(JJTNAMELIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Name();
            label_8:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[26] = jj_gen;
                        break label_8;
                }
                jj_consume_token(COMMA);
                Name();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
 * Expression syntax follows.
     */
    final public void Expression() throws ParseException {/*@bgen(jjtree) Expression */
        ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_5(2147483647)) {
                Assignment();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SUPER:
                    case THIS:
                    case NULL:
                    case TRUE:
                    case FALSE:
                    case NEW:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case LPAREN:
                    case BANG:
                    case PLUS:
                    case MINUS:
                    case IDENTIFIER: {
                        ConditionalExpression();
                        break;
                    }
                    default:
                        jj_la1[27] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
        ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Assignee();
            jj_consume_token(ASSIGN);
            AdditiveExpression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Assignee() throws ParseException {/*@bgen(jjtree) Assignee */
        ASTAssignee jjtn000 = new ASTAssignee(JJTASSIGNEE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AssigneePrefix();
            label_9:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LBRACKET:
                    case DOT: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[28] = jj_gen;
                        break label_9;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case DOT: {
                        jj_consume_token(DOT);
                        Name();
                        break;
                    }
                    case LBRACKET: {
                        ArraySuffix();
                        break;
                    }
                    default:
                        jj_la1[29] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AssigneePrefix() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case IDENTIFIER: {
                Name();
                break;
            }
            case THIS: {
                ASTThis jjtn001 = new ASTThis(JJTTHIS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(THIS);
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case SUPER: {
                ASTSuper jjtn002 = new ASTSuper(JJTSUPER);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtn002.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(SUPER);
                } finally {
                    if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtn002.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            default:
                jj_la1[30] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    /*void AssigneeSuffix() :
{Token t;}
{
  "." t = <IDENTIFIER> {jjtThis.value = t.image; }
}*/
    final public void ConditionalExpression() throws ParseException {/*@bgen(jjtree) ConditionalExpression */
        ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ConditionalOrExpression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ConditionalOrExpression() throws ParseException {/*@bgen(jjtree) ConditionalOrExpression */
        ASTConditionalOrExpression jjtn000 = new ASTConditionalOrExpression(JJTCONDITIONALOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ConditionalAndExpression();
            label_10:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SC_OR: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[31] = jj_gen;
                        break label_10;
                }
                ASTOrOperator jjtn001 = new ASTOrOperator(JJTOROPERATOR);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(SC_OR);
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                ConditionalAndExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ConditionalAndExpression() throws ParseException {/*@bgen(jjtree) ConditionalAndExpression */
        ASTConditionalAndExpression jjtn000 = new ASTConditionalAndExpression(JJTCONDITIONALANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            EqualityExpression();
            label_11:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SC_AND: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[32] = jj_gen;
                        break label_11;
                }
                ASTAndOperator jjtn001 = new ASTAndOperator(JJTANDOPERATOR);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(SC_AND);
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                EqualityExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void EqualityExpression() throws ParseException {/*@bgen(jjtree) EqualityExpression */
        ASTEqualityExpression jjtn000 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            RelationalExpression();
            label_12:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case EQ:
                    case NE: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[33] = jj_gen;
                        break label_12;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case EQ: {
                        ASTEqualOperator jjtn001 = new ASTEqualOperator(JJTEQUALOPERATOR);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(EQ);
                        } finally {
                            if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtn001.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    case NE: {
                        ASTNotEqualOperator jjtn002 = new ASTNotEqualOperator(JJTNOTEQUALOPERATOR);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(NE);
                        } finally {
                            if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtn002.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    default:
                        jj_la1[34] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                RelationalExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*void InstanceOfExpression() :
{}
{
  RelationalExpression() [ "instanceof" Type() ]
}*/
    final public void RelationalExpression() throws ParseException {/*@bgen(jjtree) RelationalExpression */
        ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AdditiveExpression();
            label_13:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case GT:
                    case LT:
                    case LE:
                    case GE: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[35] = jj_gen;
                        break label_13;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LT: {
                        ASTLessThanOperator jjtn001 = new ASTLessThanOperator(JJTLESSTHANOPERATOR);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(LT);
                        } finally {
                            if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtn001.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    case GT: {
                        ASTGreaterThanOperator jjtn002 = new ASTGreaterThanOperator(JJTGREATERTHANOPERATOR);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(GT);
                        } finally {
                            if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtn002.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    case LE: {
                        ASTLessThanOrEqualOperator jjtn003 = new ASTLessThanOrEqualOperator(JJTLESSTHANOREQUALOPERATOR);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtn003.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(LE);
                        } finally {
                            if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, true);
                                jjtn003.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    case GE: {
                        ASTGreaterThanOrEqualOperator jjtn004 = new ASTGreaterThanOrEqualOperator(JJTGREATERTHANOREQUALOPERATOR);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtn004.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(GE);
                        } finally {
                            if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, true);
                                jjtn004.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    default:
                        jj_la1[36] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                AdditiveExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AdditiveExpression() throws ParseException {/*@bgen(jjtree) AdditiveExpression */
        ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            MultiplicativeExpression();
            label_14:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case PLUS:
                    case MINUS: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[37] = jj_gen;
                        break label_14;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case PLUS: {
                        ASTPlusOperator jjtn001 = new ASTPlusOperator(JJTPLUSOPERATOR);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(PLUS);
                        } finally {
                            if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtn001.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    case MINUS: {
                        ASTMinusOperator jjtn002 = new ASTMinusOperator(JJTMINUSOPERATOR);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(MINUS);
                        } finally {
                            if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtn002.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    default:
                        jj_la1[38] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                MultiplicativeExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MultiplicativeExpression() throws ParseException {/*@bgen(jjtree) MultiplicativeExpression */
        ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            UnaryExpression();
            label_15:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case STAR:
                    case SLASH:
                    case REM: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[39] = jj_gen;
                        break label_15;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case STAR: {
                        ASTMultiplyOperator jjtn001 = new ASTMultiplyOperator(JJTMULTIPLYOPERATOR);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(STAR);
                        } finally {
                            if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtn001.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    case SLASH: {
                        ASTDivideOperator jjtn002 = new ASTDivideOperator(JJTDIVIDEOPERATOR);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtn002.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(SLASH);
                        } finally {
                            if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                                jjtn002.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    case REM: {
                        ASTModuloOperator jjtn003 = new ASTModuloOperator(JJTMODULOOPERATOR);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtn003.jjtSetFirstToken(getToken(1));
                        try {
                            jj_consume_token(REM);
                        } finally {
                            if (jjtc003) {
                                jjtree.closeNodeScope(jjtn003, true);
                                jjtn003.jjtSetLastToken(getToken(0));
                            }
                        }
                        break;
                    }
                    default:
                        jj_la1[40] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                UnaryExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void UnaryExpression() throws ParseException {/*@bgen(jjtree) UnaryExpression */
        ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PLUS:
                case MINUS: {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case PLUS: {
                            jj_consume_token(PLUS);
                            break;
                        }
                        case MINUS: {
                            ASTMinusOperator jjtn001 = new ASTMinusOperator(JJTMINUSOPERATOR);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtn001.jjtSetFirstToken(getToken(1));
                            try {
                                jj_consume_token(MINUS);
                            } finally {
                                if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                }
                            }
                            break;
                        }
                        default:
                            jj_la1[41] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    UnaryExpression();
                    break;
                }
                case SUPER:
                case THIS:
                case NULL:
                case TRUE:
                case FALSE:
                case NEW:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case BANG:
                case IDENTIFIER: {
                    UnaryExpressionNotPlusMinus();
                    break;
                }
                default:
                    jj_la1[42] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void UnaryExpressionNotPlusMinus() throws ParseException {/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
        ASTUnaryExpressionNotPlusMinus jjtn000 = new ASTUnaryExpressionNotPlusMinus(JJTUNARYEXPRESSIONNOTPLUSMINUS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BANG: {
                    ASTNegationOperator jjtn001 = new ASTNegationOperator(JJTNEGATIONOPERATOR);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                    try {
                        jj_consume_token(BANG);
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtn001.jjtSetLastToken(getToken(0));
                        }
                    }
                    UnaryExpression();
                    break;
                }
                case SUPER:
                case THIS:
                case NULL:
                case TRUE:
                case FALSE:
                case NEW:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case IDENTIFIER: {
                    PrimaryExpression();
                    break;
                }
                default:
                    jj_la1[43] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void PrimaryExpression() throws ParseException {/*@bgen(jjtree) PrimaryExpression */
        ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            PrimaryPrefix();
            label_16:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LPAREN:
                    case LBRACKET:
                    case DOT: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[44] = jj_gen;
                        break label_16;
                }
                PrimarySuffix();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void PrimaryPrefix() throws ParseException {/*@bgen(jjtree) PrimaryPrefix */
        ASTPrimaryPrefix jjtn000 = new ASTPrimaryPrefix(JJTPRIMARYPREFIX);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case NULL:
                case TRUE:
                case FALSE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL: {
                    Literal();
                    break;
                }
                case IDENTIFIER: {
                    Name();
                    break;
                }
                case THIS: {
                    ASTThis jjtn001 = new ASTThis(JJTTHIS);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                    try {
                        jj_consume_token(THIS);
                    } finally {
                        if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtn001.jjtSetLastToken(getToken(0));
                        }
                    }
                    break;
                }
                case SUPER: {
                    ASTSuper jjtn002 = new ASTSuper(JJTSUPER);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                    try {
                        jj_consume_token(SUPER);
                    } finally {
                        if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtn002.jjtSetLastToken(getToken(0));
                        }
                    }
                    break;
                }
                case LPAREN: {
                    jj_consume_token(LPAREN);
                    Expression();
                    jj_consume_token(RPAREN);
                    break;
                }
                case NEW: {
                    AllocationExpression();
                    break;
                }
                default:
                    jj_la1[45] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void PrimarySuffix() throws ParseException {/*@bgen(jjtree) PrimarySuffix */
        ASTPrimarySuffix jjtn000 = new ASTPrimarySuffix(JJTPRIMARYSUFFIX);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACKET: {
                    ArraySuffix();
                    break;
                }
                case DOT: {
                    jj_consume_token(DOT);
                    Name();
                    break;
                }
                case LPAREN: {
                    Arguments();
                    break;
                }
                default:
                    jj_la1[46] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Literal() throws ParseException {
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case INTEGER_LITERAL: {
                t = jj_consume_token(INTEGER_LITERAL);
                ASTNumberLiteral jjtn001 = new ASTNumberLiteral(JJTNUMBERLITERAL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtc001 = false;
                    jjtn001.jjtSetLastToken(getToken(0));
                    jjtn001.value = t.image;
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case FLOATING_POINT_LITERAL: {
                t = jj_consume_token(FLOATING_POINT_LITERAL);
                ASTFloatLiteral jjtn002 = new ASTFloatLiteral(JJTFLOATLITERAL);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtn002.jjtSetFirstToken(getToken(1));
                try {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtn002.jjtSetLastToken(getToken(0));
                    jjtn002.value = t.image;
                } finally {
                    if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtn002.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case CHARACTER_LITERAL: {
                t = jj_consume_token(CHARACTER_LITERAL);
                ASTCharLiteral jjtn003 = new ASTCharLiteral(JJTCHARLITERAL);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtn003.jjtSetFirstToken(getToken(1));
                try {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtc003 = false;
                    jjtn003.jjtSetLastToken(getToken(0));
                    jjtn003.value = t.image;
                } finally {
                    if (jjtc003) {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtn003.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case STRING_LITERAL: {
                t = jj_consume_token(STRING_LITERAL);
                ASTStringLiteral jjtn004 = new ASTStringLiteral(JJTSTRINGLITERAL);
                boolean jjtc004 = true;
                jjtree.openNodeScope(jjtn004);
                jjtn004.jjtSetFirstToken(getToken(1));
                try {
                    jjtree.closeNodeScope(jjtn004, true);
                    jjtc004 = false;
                    jjtn004.jjtSetLastToken(getToken(0));
                    jjtn004.value = t.image;
                } finally {
                    if (jjtc004) {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtn004.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case TRUE:
            case FALSE: {
                BooleanLiteral();
                break;
            }
            case NULL: {
                NullLiteral();
                break;
            }
            default:
                jj_la1[47] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void BooleanLiteral() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case TRUE: {
                ASTTrue jjtn001 = new ASTTrue(JJTTRUE);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(TRUE);
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            case FALSE: {
                ASTFalse jjtn002 = new ASTFalse(JJTFALSE);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
                jjtn002.jjtSetFirstToken(getToken(1));
                try {
                    jj_consume_token(FALSE);
                } finally {
                    if (jjtc002) {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtn002.jjtSetLastToken(getToken(0));
                    }
                }
                break;
            }
            default:
                jj_la1[48] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void NullLiteral() throws ParseException {/*@bgen(jjtree) NullLiteral */
        ASTNullLiteral jjtn000 = new ASTNullLiteral(JJTNULLLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(NULL);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Arguments() throws ParseException {/*@bgen(jjtree) Arguments */
        ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LPAREN);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SUPER:
                case THIS:
                case NULL:
                case TRUE:
                case FALSE:
                case NEW:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case BANG:
                case PLUS:
                case MINUS:
                case IDENTIFIER: {
                    ArgumentList();
                    break;
                }
                default:
                    jj_la1[49] = jj_gen;
                    ;
            }
            jj_consume_token(RPAREN);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ArgumentList() throws ParseException {
        Expression();
        label_17:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA: {
                    ;
                    break;
                }
                default:
                    jj_la1[50] = jj_gen;
                    break label_17;
            }
            jj_consume_token(COMMA);
            Expression();
        }
    }

    final public void AllocationExpression() throws ParseException {/*@bgen(jjtree) AllocationExpression */
        ASTAllocationExpression jjtn000 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_6(2)) {
                jj_consume_token(NEW);
                PrimitiveType();
                ArraySuffix();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case NEW: {
                        jj_consume_token(NEW);
                        Name();
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case LPAREN: {
                                Arguments();
                                break;
                            }
                            case LBRACKET: {
                                ArraySuffix();
                                break;
                            }
                            default:
                                jj_la1[51] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    }
                    default:
                        jj_la1[52] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
     */
    final public void ArraySuffix() throws ParseException {/*@bgen(jjtree) ArraySuffix */
        ASTArraySuffix jjtn000 = new ASTArraySuffix(JJTARRAYSUFFIX);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LBRACKET);
            Expression();
            jj_consume_token(RBRACKET);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*
 * Statement syntax follows.
     */
    final public void Statement() throws ParseException {/*@bgen(jjtree) Statement */
        ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_7(2)) {
                StatementExpression();
                jj_consume_token(ENDLINE);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case IF: {
                        IfStatement();
                        break;
                    }
                    case WHILE: {
                        WhileStatement();
                        break;
                    }
                    case BREAK: {
                        BreakStatement();
                        break;
                    }
                    case CONTINUE: {
                        ContinueStatement();
                        break;
                    }
                    case RETURN: {
                        ReturnStatement();
                        break;
                    }
                    case DEBUG: {
                        DebugStatement();
                        break;
                    }
                    default:
                        jj_la1[53] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Block() throws ParseException {/*@bgen(jjtree) Block */
        ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(LBRACE);
            label_18:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case DECLARATION:
                    case SUPER:
                    case THIS:
                    case NULL:
                    case TRUE:
                    case FALSE:
                    case NEW:
                    case IF:
                    case WHILE:
                    case BREAK:
                    case CONTINUE:
                    case RETURN:
                    case DEBUG:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case LPAREN:
                    case IDENTIFIER: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[54] = jj_gen;
                        break label_18;
                }
                BlockStatement();
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void BlockStatement() throws ParseException {
        if (jj_2_8(2147483647)) {
            LocalVariableDeclaration();
            jj_consume_token(ENDLINE);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SUPER:
                case THIS:
                case NULL:
                case TRUE:
                case FALSE:
                case NEW:
                case IF:
                case WHILE:
                case BREAK:
                case CONTINUE:
                case RETURN:
                case DEBUG:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case IDENTIFIER: {
                    Statement();
                    break;
                }
                default:
                    jj_la1[55] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
    }

    final public void LocalVariableDeclaration() throws ParseException {/*@bgen(jjtree) LocalVariableDeclaration */
        ASTLocalVariableDeclaration jjtn000 = new ASTLocalVariableDeclaration(JJTLOCALVARIABLEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(DECLARATION);
            Type();
            VariableDeclarator();
            label_19:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[56] = jj_gen;
                        break label_19;
                }
                jj_consume_token(COMMA);
                VariableDeclarator();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void DebugStatement() throws ParseException {/*@bgen(jjtree) DebugStatement */
        ASTDebugStatement jjtn000 = new ASTDebugStatement(JJTDEBUGSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(DEBUG);
            jj_consume_token(ENDLINE);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void EmptyStatement() throws ParseException {/*@bgen(jjtree) EmptyStatement */
        ASTEmptyStatement jjtn000 = new ASTEmptyStatement(JJTEMPTYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(ENDLINE);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StatementExpression() throws ParseException {/*@bgen(jjtree) StatementExpression */
        ASTStatementExpression jjtn000 = new ASTStatementExpression(JJTSTATEMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_9(2147483647)) {
                Assignment();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SUPER:
                    case THIS:
                    case NULL:
                    case TRUE:
                    case FALSE:
                    case NEW:
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case LPAREN:
                    case IDENTIFIER: {
                        PrimaryExpression();
                        break;
                    }
                    default:
                        jj_la1[57] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void SwitchStatement() throws ParseException {/*@bgen(jjtree) SwitchStatement */
        ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(SWITCH);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            jj_consume_token(LBRACE);
            label_20:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case CASE:
                    case _DEFAULT: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[58] = jj_gen;
                        break label_20;
                }
                SwitchLabel();
                label_21:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case DECLARATION:
                        case SUPER:
                        case THIS:
                        case NULL:
                        case TRUE:
                        case FALSE:
                        case NEW:
                        case IF:
                        case WHILE:
                        case BREAK:
                        case CONTINUE:
                        case RETURN:
                        case DEBUG:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case LPAREN:
                        case IDENTIFIER: {
                            ;
                            break;
                        }
                        default:
                            jj_la1[59] = jj_gen;
                            break label_21;
                    }
                    BlockStatement();
                }
            }
            jj_consume_token(RBRACE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void SwitchLabel() throws ParseException {/*@bgen(jjtree) SwitchLabel */
        ASTSwitchLabel jjtn000 = new ASTSwitchLabel(JJTSWITCHLABEL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case CASE: {
                    jj_consume_token(CASE);
                    Expression();
                    jj_consume_token(81);
                    break;
                }
                case _DEFAULT: {
                    jj_consume_token(_DEFAULT);
                    jj_consume_token(81);
                    break;
                }
                default:
                    jj_la1[60] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
        ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IF);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            Block();
            label_22:
            while (true) {
                if (jj_2_10(3)) {
                    ;
                } else {
                    break label_22;
                }
                jj_consume_token(ELSEIF);
                jj_consume_token(LPAREN);
                Expression();
                jj_consume_token(RPAREN);
                Block();
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case ELSE: {
                    jj_consume_token(ELSE);
                    Block();
                    break;
                }
                default:
                    jj_la1[61] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
        ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(WHILE);
            jj_consume_token(LPAREN);
            Expression();
            jj_consume_token(RPAREN);
            Block();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    /*void DoStatement() :
{}
{
  "opakuj" Statement() "dokavad" "(" Expression() ")" "proved"
}

void ForStatement() :
{}
{
  "for" "(" [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}*/
    final public void StatementExpressionList() throws ParseException {/*@bgen(jjtree) StatementExpressionList */
        ASTStatementExpressionList jjtn000 = new ASTStatementExpressionList(JJTSTATEMENTEXPRESSIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            StatementExpression();
            label_23:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[62] = jj_gen;
                        break label_23;
                }
                jj_consume_token(COMMA);
                StatementExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ForUpdate() throws ParseException {/*@bgen(jjtree) ForUpdate */
        ASTForUpdate jjtn000 = new ASTForUpdate(JJTFORUPDATE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            StatementExpressionList();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void BreakStatement() throws ParseException {/*@bgen(jjtree) BreakStatement */
        ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(BREAK);
            jj_consume_token(ENDLINE);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ContinueStatement() throws ParseException {/*@bgen(jjtree) ContinueStatement */
        ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(CONTINUE);
            jj_consume_token(ENDLINE);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ReturnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
        ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(RETURN);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SUPER:
                case THIS:
                case NULL:
                case TRUE:
                case FALSE:
                case NEW:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case LPAREN:
                case BANG:
                case PLUS:
                case MINUS:
                case IDENTIFIER: {
                    Expression();
                    break;
                }
                default:
                    jj_la1[63] = jj_gen;
                    ;
            }
            jj_consume_token(ENDLINE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ThrowStatement() throws ParseException {/*@bgen(jjtree) ThrowStatement */
        ASTThrowStatement jjtn000 = new ASTThrowStatement(JJTTHROWSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(THROW);
            Expression();
            jj_consume_token(ENDLINE);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TryStatement() throws ParseException {/*@bgen(jjtree) TryStatement */
        ASTTryStatement jjtn000 = new ASTTryStatement(JJTTRYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(TRY);
            Block();
            label_24:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case CATCH: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[64] = jj_gen;
                        break label_24;
                }
                jj_consume_token(CATCH);
                jj_consume_token(LPAREN);
                FormalParameter();
                jj_consume_token(RPAREN);
                Block();
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case FINALLY: {
                    jj_consume_token(FINALLY);
                    Block();
                    break;
                }
                default:
                    jj_la1[65] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_3R_43() {
        if (jj_3R_56()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_30() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_43()) {
            jj_scanpos = xsp;
            if (jj_3R_44()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_116() {
        if (jj_scan_token(EQ)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_98() {
        if (jj_3R_102()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_103()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_112() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_116()) {
            jj_scanpos = xsp;
            if (jj_3R_117()) {
                return true;
            }
        }
        if (jj_3R_97()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_95() {
        if (jj_3R_98()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_99()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_106() {
        if (jj_scan_token(SC_AND)) {
            return true;
        }
        if (jj_3R_92()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_100() {
        if (jj_scan_token(SC_OR)) {
            return true;
        }
        if (jj_3R_80()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_3R_31()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_scan_token(LBRACE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_25() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_32()) {
            jj_scanpos = xsp;
            if (jj_3R_33()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_97() {
        if (jj_3R_95()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_115()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_8() {
        if (jj_scan_token(DECLARATION)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_92() {
        if (jj_3R_97()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_112()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_80() {
        if (jj_3R_92()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_106()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_91() {
        if (jj_3R_77()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_67() {
        if (jj_3R_80()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_100()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_3R_67()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_90() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_3R_61()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_79() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_90()) {
            jj_scanpos = xsp;
            if (jj_3R_91()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_1() {
        if (jj_scan_token(DECLARATION)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_89() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_85() {
        if (jj_3R_77()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_88() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_87() {
        if (jj_3R_61()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_78() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_87()) {
            jj_scanpos = xsp;
            if (jj_3R_88()) {
                jj_scanpos = xsp;
                if (jj_3R_89()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_66() {
        if (jj_3R_78()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_79()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_7() {
        if (jj_3R_30()) {
            return true;
        }
        if (jj_scan_token(ENDLINE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_28()) {
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_84() {
        if (jj_3R_48()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_3R_66()) {
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        if (jj_3R_95()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_77() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_3R_31()) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_3R_57()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_101() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_31()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_3R_56()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_31() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_45()) {
            jj_scanpos = xsp;
            if (jj_3R_46()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_76() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (jj_3R_61()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_84()) {
            jj_scanpos = xsp;
            if (jj_3R_85()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_69() {
        if (jj_3R_81()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_6() {
        if (jj_scan_token(NEW)) {
            return true;
        }
        if (jj_3R_29()) {
            return true;
        }
        if (jj_3R_77()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_62() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_6()) {
            jj_scanpos = xsp;
            if (jj_3R_76()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_123() {
        if (jj_scan_token(GE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_96() {
        if (jj_3R_31()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_101()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_86() {
        if (jj_3R_96()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_3R_61()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_69()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_61() {
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_86()) {
            jj_scanpos = xsp;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_3R_47()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_83() {
        if (jj_scan_token(NULL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_26() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(19)) {
            jj_scanpos = xsp;
            if (jj_3R_34()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_94() {
        if (jj_scan_token(FALSE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_68() {
        if (jj_3R_81()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_93() {
        if (jj_scan_token(TRUE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_82() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_93()) {
            jj_scanpos = xsp;
            if (jj_3R_94()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_10() {
        if (jj_scan_token(ELSEIF)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_31()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_scan_token(FLOAT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_111() {
        if (jj_scan_token(REM)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_41() {
        if (jj_scan_token(INT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(CHAR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_75() {
        if (jj_3R_83()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_39() {
        if (jj_scan_token(BOOLEAN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_29() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_39()) {
            jj_scanpos = xsp;
            if (jj_3R_40()) {
                jj_scanpos = xsp;
                if (jj_3R_41()) {
                    jj_scanpos = xsp;
                    if (jj_3R_42()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_74() {
        if (jj_3R_82()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_scan_token(STRING_LITERAL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_122() {
        if (jj_scan_token(LE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_81() {
        if (jj_scan_token(LBRACKET)) {
            return true;
        }
        if (jj_scan_token(RBRACKET)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_72() {
        if (jj_scan_token(CHARACTER_LITERAL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_scan_token(FLOATING_POINT_LITERAL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_58() {
        if (jj_3R_29()) {
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_68()) {
            jj_scanpos = xsp;
        }
        return false;
    }

    private boolean jj_3R_60() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_70()) {
            jj_scanpos = xsp;
            if (jj_3R_71()) {
                jj_scanpos = xsp;
                if (jj_3R_72()) {
                    jj_scanpos = xsp;
                    if (jj_3R_73()) {
                        jj_scanpos = xsp;
                        if (jj_3R_74()) {
                            jj_scanpos = xsp;
                            if (jj_3R_75()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_70() {
        if (jj_scan_token(INTEGER_LITERAL)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_47() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_58()) {
            jj_scanpos = xsp;
            if (jj_3R_59()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_65() {
        if (jj_3R_48()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_64() {
        if (jj_scan_token(DOT)) {
            return true;
        }
        if (jj_3R_61()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_110() {
        if (jj_scan_token(SLASH)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_55() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_63()) {
            jj_scanpos = xsp;
            if (jj_3R_64()) {
                jj_scanpos = xsp;
                if (jj_3R_65()) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_63() {
        if (jj_3R_77()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_105() {
        if (jj_scan_token(MINUS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_3R_55()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_36() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        if (jj_3R_48()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_54() {
        if (jj_3R_62()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        if (jj_3R_48()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_27()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_27() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_35()) {
            jj_scanpos = xsp;
            if (jj_3R_36()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3R_53() {
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        if (jj_3R_31()) {
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_52() {
        if (jj_scan_token(SUPER)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_121() {
        if (jj_scan_token(GT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_51() {
        if (jj_scan_token(THIS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_3R_61()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_49() {
        if (jj_3R_60()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_37() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_49()) {
            jj_scanpos = xsp;
            if (jj_3R_50()) {
                jj_scanpos = xsp;
                if (jj_3R_51()) {
                    jj_scanpos = xsp;
                    if (jj_3R_52()) {
                        jj_scanpos = xsp;
                        if (jj_3R_53()) {
                            jj_scanpos = xsp;
                            if (jj_3R_54()) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_104() {
        if (jj_scan_token(PLUS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_37()) {
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_38()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_109() {
        if (jj_scan_token(STAR)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_117() {
        if (jj_scan_token(NE)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_99() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_104()) {
            jj_scanpos = xsp;
            if (jj_3R_105()) {
                return true;
            }
        }
        if (jj_3R_98()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_103() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_109()) {
            jj_scanpos = xsp;
            if (jj_3R_110()) {
                jj_scanpos = xsp;
                if (jj_3R_111()) {
                    return true;
                }
            }
        }
        if (jj_3R_102()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_119() {
        if (jj_3R_28()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_scan_token(COMMA)) {
            return true;
        }
        if (jj_3R_25()) {
            return true;
        }
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_26()) {
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_118() {
        if (jj_scan_token(BANG)) {
            return true;
        }
        if (jj_3R_102()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_114() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_118()) {
            jj_scanpos = xsp;
            if (jj_3R_119()) {
                return true;
            }
        }
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_28()) {
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_113() {
        if (jj_scan_token(MINUS)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_120() {
        if (jj_scan_token(LT)) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_108() {
        if (jj_3R_114()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_3R_28()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_115() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_120()) {
            jj_scanpos = xsp;
            if (jj_3R_121()) {
                jj_scanpos = xsp;
                if (jj_3R_122()) {
                    jj_scanpos = xsp;
                    if (jj_3R_123()) {
                        return true;
                    }
                }
            }
        }
        if (jj_3R_95()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_107() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(73)) {
            jj_scanpos = xsp;
            if (jj_3R_113()) {
                return true;
            }
        }
        if (jj_3R_102()) {
            return true;
        }
        return false;
    }

    private boolean jj_3R_102() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_107()) {
            jj_scanpos = xsp;
            if (jj_3R_108()) {
                return true;
            }
        }
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public CZECHJavaParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[66];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x1000, 0x2000, 0x84000, 0x80000, 0x0, 0x0, 0x0, 0xf60000, 0x0, 0xf60000, 0x0, 0x0, 0x800, 0x10000, 0x10000, 0x0, 0x0, 0x0, 0x10000, 0x39f64000, 0x60000, 0x0, 0x0, 0x0, 0x0, 0x80000, 0x0, 0xf60000, 0x0, 0x0, 0x60000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf60000, 0xf60000, 0x0, 0xf60000, 0x0, 0x700000, 0x600000, 0xf60000, 0x0, 0x0, 0x800000, 0x39000000, 0x39f64000, 0x39f60000, 0x0, 0xf60000, 0x0, 0x39f64000, 0x0, 0x4000000, 0x0, 0xf60000, 0x80000000, 0x0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0xfc, 0xfc, 0x20000000, 0x80000000, 0x8000000, 0x2e88000, 0x20000000, 0x2e88000, 0x4, 0x8, 0x2000000, 0x0, 0x0, 0x0, 0x20000000, 0xf0, 0x0, 0xe88102, 0x0, 0x8000000, 0x8000000, 0xf0, 0xf0, 0xf0, 0x20000000, 0xe88000, 0x48000000, 0x48000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe88000, 0xe88000, 0x48800000, 0xe88000, 0x48800000, 0x688000, 0x0, 0xe88000, 0x20000000, 0x8800000, 0x0, 0x102, 0xe88102, 0xe88102, 0x20000000, 0xe88000, 0xc00, 0xe88102, 0xc00, 0x0, 0x20000000, 0xe88000, 0x0, 0x1,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x0, 0x0, 0x4000, 0x4000, 0x0, 0x0, 0x0, 0x4604, 0x0, 0x4604, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000, 0x0, 0x4000, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x4000, 0x0, 0x4000, 0x0, 0x4604, 0x0, 0x0, 0x4000, 0x80, 0x100, 0x48, 0x48, 0x33, 0x33, 0x600, 0x600, 0x3800, 0x3800, 0x600, 0x4604, 0x4004, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x4604, 0x0, 0x0, 0x0, 0x0, 0x4000, 0x4000, 0x0, 0x4000, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x4604, 0x0, 0x0,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[10];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public CZECHJavaParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public CZECHJavaParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new CZECHJavaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 66; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 66; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor.
     */
    public CZECHJavaParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new CZECHJavaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 66; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 66; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Constructor with generated Token Manager.
     */
    public CZECHJavaParser(CZECHJavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 66; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(CZECHJavaParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 66; i++) {
            jj_la1[i] = -1;
        }
        for (int i = 0; i < jj_2_rtns.length; i++) {
            jj_2_rtns[i] = new JJCalls();
        }
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) {
                jj_add_error_token(kind, i);
            }
        }
        if (jj_scanpos.kind != kind) {
            return true;
        }
        if (jj_la == 0 && jj_scanpos == jj_lastpos) {
            throw jj_ls;
        }
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[82];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 66; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 82; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 10; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {

        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
